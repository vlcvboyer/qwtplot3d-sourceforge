/*
  This file contains NO source code, just some documentation for doxygen to
  parse.
*/

/*!
  \mainpage %QwtPlot3D User's Guide

  \image html plot3d.jpg


	\section news News
	- Apr 27 2003: 
		<b> new release 0.1.1 alpha</b> (<a href="http://sourceforge.net/projects/qwtplot3d">download</a>)
	
	See also \ref changes	


  \section screenshotsonmainpage Screenshots
  
  Screenshots are on a separate page, \ref screenshots.
  
  
	\section features Features 

   -# Scaling, rotating, shifting, zooming of data sets and mathematical functions (see \ref datatopics)
   -# Interactive mouse handling
   -# Resolution changing on the fly
   -# Reading from MESH data files :See the 'examples/data' directory and NativeReader documentation
   for this . You will find example datasets <a href="http://sourceforge.net/projects/qwtplot3d">here</a> 
   -# Flat (2D) labeling
 	 -# Wireframe, filled polygons, hidden line (improvement necessary)
 	 -# On floor projections (isolines, data)
	 -# Autoscalable axes	
	 -# Free color model
	 -# Save widget content to pixmap file
 		
 		
 	\section todo Todo
 	<b style="color:#228B22;">CVS</b>: Changes in CVS yet
 	 
 	 Next release:
	 
	 -# Input: FEM files providing nodes and triangulation 
 	 -# Configurable illumination model	
   -# Documentation improvement
	 

	 Subsequent releases:

	 -# Native Delaunay triangulation for <tt>(x,y,z)</tt>-triples with irregularly distributed <tt>(x,y)</tt>-tuples )	 
 	 -# Labeling and proper scaling (mipmapping) of user defined pixmaps
 	 
 	 <b>  ...Proposals !	</b>

  \section examplesonmainpage Examples
  
  You can find a short description of the demo programs  under \ref examples.

	\section conventionsonmainpage Using conventions
	You should be aware of some limitations for your data: See \ref conventions

  \section downloads Downloads
  Stable releases, prereleases and snapshots are available at <a href="http://sourceforge.net/projects/qwtplot3d">sourceforge</a>.
	<br>Nightly CVS tarballs can be found 
  <a href="http://cvs.sourceforge.net/cvstarballs/qwtplot3d-cvsroot.tar.gz">here</a>.
	
	Offline  documentation: 
	\n
	\n <a href="http://qwtplot3d.sourceforge.net/qwtplot3d-doc.zip"> qwtplot3d-doc.zip</a>
  \n <a href="http://qwtplot3d.sourceforge.net/qwtplot3d-doc.tgz"> qwtplot3d-doc.tgz</a>
	
  Anonymous CVS is also available:
  \code
cvs -d:pserver:anonymous@cvs.qwtplot3d.sourceforge.net:/cvsroot/qwtplot3d login
cvs -z3 -d:pserver:anonymous@cvs.qwtplot3d.sourceforge.net:/cvsroot/qwtplot3d co qwtplot3d
  \endcode

  \section changesonmainpage Change log
  The change log is on a separate page, \ref changes.

  \section installonmainpage Installation
  Install notes are on a separate page, \ref install.
  
  \section author Author:
	Micha Bieber < krischnamurti <b>(at)</b> users <b>(dot)</b> sourceforge <b>(dot)</b> net >

*/

/*!
  \page install Installation

	For now, QwtPlot3d is not part of <a href="http://qwt.sourceforge.net">Qwt</a> and the library is completely independent of the 
	latter.
	With qwtplot3d.pro you can create a static library VC6 project for windows and a shared library for POSIX systems. I will change
	the Windows type to DLL in the future.
	
	QwtPlot3D runs with Qt version 3.0.5 for Windows and with version 3.1.? on Debian Linux. Older Qt versions are likely working.
	If I'm wrong with the latter guess, please don't hesitate to contact me. I'll try to provide a code fix in this case. 
	
	The library requires OpenGL >= 1.1 and a true color mode with 24 or 32 bits color depth.
	
	Documentation has been created using <a href="http://www.doxygen.org">doxygen</a>. You will find the configuration in
	<tt>./doc/Doxyfile.doxygen</tt>
 
*/


/*!
  \page screenshots Screenshots

  \latexonly Screenshots are only available in the HTML docs.\endlatexonly

  \image html simpleapp2.png "Example Application (Windows 2000)"
  \image html simpleapp3.png "Other View (Debian/KDE)"
  \image html zooming.png "Zooming"

*/

/*!
  \page datatopics Data Input Topics

	QwtPlot3D supports a general and two special forms of native data input:
	
  \n\par Mesh data files:
   
  You can read a special simple form of ASCII files containing z-values and domain information, organized in the following
  way (C++ comments for this documentation only !):
  
  \code
	 jk:11051895-17021986												//	magic	string
	 MESH																			 	//	MESH file	(other keywords	in future	versions)
	 327 466																	 	//	x,y	grid
	 557726	567506														 	//	domain boundaries	(x values)
	 5.10821e+006	5.12216e+006								 	//	domain boundaries	(y values)
	 682 682 682 682 912 924 928 928 932 ... 
	 ... element[327*466-1]										 	//	the	single z values	
  \endcode  

	\n\n
	<em>Coding example:</em>\n\n 
	Reading of the aforementioned file type
  \n\n
  
\code  
	bool NativeReader::read(double minz, double maxz)
	{
		
		FILE* file;
		unsigned int xmesh, ymesh;
		double minx, maxx, miny, maxy;
		
		// open file and read file header info; check validity
		if ( !collectInfo(file, xmesh, ymesh, minx, maxx, miny, maxy) )
			return false;
		
		// allocate temporary space for the grid
	 	double** data = allocateData(xmesh, ymesh);
	
		// step through file and fill in data
		for (unsigned int j = 0; j < ymesh; j++) 
		{
	    for (unsigned int i = 0; i < xmesh; i++) 
			{
	      if (fscanf(file, "%lf", &data[i][j]) != 1) 
				{
					fprintf(stderr, "NativeReader::read: error in data file \"%s\"\n", fileName_.latin1());
					return false;
	      }
	
				// cut to limits
				if (data[i][j] > maxz)
					data[i][j] = maxz;
				else if (data[i][j] < minz)
					data[i][j] = minz;
	    }
	  }
	
	  // close the file
	  fclose(file);
	
		// NativeReader's ctor argument is the actual QwtPlot3D widget - feed them with data 
		plotwidget_->createDataRepresentation(data, xmesh, ymesh, minx, maxx, miny, maxy);
		
		// clean up temporary data pool
		deleteData(data,xmesh);
	
		return true;
	}
\endcode
  
  
  See NativeReader for additional information. Write your own SpecialReader classes in this spirit. Simply provide
  appropriate data for QwtPlot3D::createDataRepresentation.
  
  \n\par Mathematical functions:
  
  Setup a function object. To do so, inherit from the Function class and 
  write your own version of Function::operator()(double x, double y)
  Set the domain and perhaps limitations for the range and call Function::create().
  Thats all.See also Function and the implementation of concrete functions in 'examples'

	\n\par Generic:
	
	A general approach has been provided in form of the member 
	
	QwtPlot3D::createDataRepresentation().
	
	For the present, you can feed the function with a <tt>double**</tt> pointer to your data. I'll extend this in the future.

*/

/*!
\page conventions Conventions   

Calculations are performed as accurate as DBL_EPSILON (see your float.h for the precise value). See e.g.
<a href="http://groups.google.com/groups?hl=en&lr=&ie=UTF-8&oe=UTF-8&threadm=6odqk1%24p23%241%40nnrp1.dejanews.com&rnum=1&prev=/groups%3Fq%3DFLT_EPSILON%26hl%3Den%26lr%3D%26ie%3DUTF-8%26oe%3DUTF-8%26selm%3D6odqk1%2524p23%25241%2540nnrp1.dejanews.com%26rnum%3D1"> 
here</a> for a topic related discussion.

*/